openapi: 3.0.3
info:
  title: User Service API
  description: API for managing users in Vehicle Rental System
  version: 1.0.0
  contact:
    name: User Service Team
    email: team@rentavehicle.com

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.rentavehicle.com
    description: Production server

tags:
  - name: users
    description: User management operations

paths:
  /api/v1/users:
    post:
      tags:
        - users
      summary: Create a new user
      description: Register a new user in the system
      operationId: createUser
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users with pagination
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Sort criteria
          schema:
            type: string
            example: "lastName,asc"
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer

  /api/v1/users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - users
      summary: Update user
      description: Update user information
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - users
      summary: Delete user
      description: Soft delete a user from the system
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - birthDate
        - licenseType
        - licenseNumber
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          pattern: '^\+?[0-9]{9,15}$'
          example: "+1234567890"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        licenseType:
          type: string
          enum: [CAR, MOTORCYCLE, TRUCK, BUS]
          example: "CAR"
        licenseNumber:
          type: string
          minLength: 5
          maxLength: 20
          example: "DL123456789"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+1234567890"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        licenseType:
          type: string
          example: "CAR"
        licenseNumber:
          type: string
          example: "DL123456789"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        phoneNumber:
          type: string
          pattern: '^\+?[0-9]{9,15}$'
        licenseType:
          type: string
          enum: [CAR, MOTORCYCLE, TRUCK, BUS]

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        path:
          type: string
          example: "/api/v1/users"